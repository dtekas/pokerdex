#!/usr/bin/env node

/**
 * Module dependencies.
 */
var cluster = require("cluster");
var app = require('../app');
var debug = require('debug')('pokedex:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


let numCPUs = 1;

if (cluster.isMaster) {
	console.log('Master cluster setting up ' + numCPUs + ' workers...');
	for (ctr = 0; ctr < numCPUs; ctr++) {
		cluster.fork();
	}

	cluster.on('online', function(worker) {
		console.log('Worker ' + worker.process.pid + ' is online');
	});

	cluster.on('exit', function(worker, code, signal) {
		console.log('Worker ' + worker.process.pid + ' died with code: ' + code + ', and signal: ' + signal);
		console.log('Starting a new worker');
		if (signal) {
			console.log("worker was killed by signal: " + signal);
		} else if( code !== 0 ) {
			console.log("worker exited with error code: " + code);
		} else {
			console.log("worker normal exit!");
		}
		cluster.fork();
	});
} else {
	/* Workers can share any TCP connection, In this case its a HTTP server */
	server = http.createServer(app);
	server.listen(port, function() {
		console.info('Process ' + process.pid + ' is listening to all incoming requests on port ' + port);
	});
	server.on('error', onError);
	server.on('listening', onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
